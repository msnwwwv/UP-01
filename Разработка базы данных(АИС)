import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

// Класс, представляющий пассажира
class Passenger {
    int id;
    String name;
    String surname;
    String phone;

    public Passenger(int id, String name, String surname, String phone) {
        this.id = id;
        this.name = name;
        this.surname = surname;
        this.phone = phone;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Имя: " + name + ", Фамилия: " + surname + ", Телефон: " + phone;
    }
}

// Класс для управления "базой данных" пассажиров
class RailwayDatabase {
    private List<Passenger> passengers = new ArrayList<>();
    private int nextId = 1;

    public List<Passenger> getPassengers() {
        return passengers;
    }

    public void addPassenger(String name, String surname, String phone) {
        Passenger passenger = new Passenger(nextId++, name, surname, phone);
        passengers.add(passenger);
    }

    public void editPassenger(int id, String newName, String newSurname, String newPhone) {
        for (Passenger passenger : passengers) {
            if (passenger.id == id) {
                passenger.name = newName;
                passenger.surname = newSurname;
                passenger.phone = newPhone;
                return;
            }
        }
    }

    public void deletePassenger(int id) {
        passengers.removeIf(passenger -> passenger.id == id);
    }
}

// Основной класс для графического интерфейса
public class RailwayStationApp extends JFrame {
    private RailwayDatabase database = new RailwayDatabase();
    private DefaultTableModel tableModel;
    private JTable passengerTable;

    public RailwayStationApp() {
        setTitle("ЖД Вокзал - База пассажиров");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Настройка таблицы для отображения пассажиров
        tableModel = new DefaultTableModel(new Object[]{"ID", "Имя", "Фамилия", "Телефон"}, 0);
        passengerTable = new JTable(tableModel);
        refreshPassengerTable();

        JScrollPane scrollPane = new JScrollPane(passengerTable);
        add(scrollPane, BorderLayout.CENTER);

        // Панель с кнопками
        JPanel buttonPanel = new JPanel();
        JButton addButton = new JButton("Добавить");
        JButton editButton = new JButton("Редактировать");
        JButton deleteButton = new JButton("Удалить");

        addButton.addActionListener(this::showAddPassengerDialog);
        editButton.addActionListener(this::showEditPassengerDialog);
        deleteButton.addActionListener(this::deleteSelectedPassenger);

        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);

        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void refreshPassengerTable() {
        tableModel.setRowCount(0);
        for (Passenger passenger : database.getPassengers()) {
            tableModel.addRow(new Object[]{passenger.id, passenger.name, passenger.surname, passenger.phone});
        }
    }

    private void showAddPassengerDialog(ActionEvent e) {
        JTextField nameField = new JTextField();
        JTextField surnameField = new JTextField();
        JTextField phoneField = new JTextField();

        Object[] fields = {
                "Имя:", nameField,
                "Фамилия:", surnameField,
                "Телефон:", phoneField
        };

        int option = JOptionPane.showConfirmDialog(this, fields, "Добавить пассажира", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String name = nameField.getText();
            String surname = surnameField.getText();
            String phone = phoneField.getText();
            database.addPassenger(name, surname, phone);
            refreshPassengerTable();
        }
    }

    private void showEditPassengerDialog(ActionEvent e) {
        int selectedRow = passengerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Пожалуйста, выберите пассажира для редактирования.");
            return;
        }

        int id = (int) tableModel.getValueAt(selectedRow, 0);
        Passenger passenger = database.getPassengers().stream().filter(p -> p.id == id).findFirst().orElse(null);

        JTextField nameField = new JTextField(passenger.name);
        JTextField surnameField = new JTextField(passenger.surname);
        JTextField phoneField = new JTextField(passenger.phone);

        Object[] fields = {
                "Имя:", nameField,
                "Фамилия:", surnameField,
                "Телефон:", phoneField
        };

        int option = JOptionPane.showConfirmDialog(this, fields, "Редактировать пассажира", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            passenger.name = nameField.getText();
            passenger.surname = surnameField.getText();
            passenger.phone = phoneField.getText();
            database.editPassenger(id, passenger.name, passenger.surname, passenger.phone);
            refreshPassengerTable();
        }
    }

    private void deleteSelectedPassenger(ActionEvent e) {
        int selectedRow = passengerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Пожалуйста, выберите пассажира для удаления.");
            return;
        }

        int id = (int) tableModel.getValueAt(selectedRow, 0);
        database.deletePassenger(id);
        refreshPassengerTable();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            RailwayStationApp app = new RailwayStationApp();
            app.setVisible(true);
        });
    }
}
